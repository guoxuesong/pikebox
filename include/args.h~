#define _HANDLE_REQUIRED(ARGNAME,FLAGVAR) if(args["_required_"]&&FLAGVAR==0){throw(({"--"+ARGNAME+" is required.\n",backtrace()}));};m_delete(args,"_required_");

#define ARGUMENT_FLAG(ARGNAME,FLAGVAR) int FLAGVAR=(int)!zero_type(args[ARGNAME]);_HANDLE_REQUIRED(ARGNAME,FLAGVAR);args["_result"]=args["_result"]||([]);args["_result"]->FLAGVAR=FLAGVAR;

#define ARGUMENT_INTEGER(ARGNAME,FLAGVAR,DATAVAR) int FLAGVAR=(int)!zero_type(args[ARGNAME]);int DATAVAR;if(FLAGVAR) DATAVAR=(int)args[ARGNAME];_HANDLE_REQUIRED(ARGNAME,FLAGVAR);args["_result"]=args["_result"]||([]);args["_result"]->FLAGVAR=FLAGVAR;args["_result"]->DATAVAR=DATAVAR;

#define ARGUMENT_STRING(ARGNAME,FLAGVAR,DATAVAR) int FLAGVAR=(int)!zero_type(args[ARGNAME]);string DATAVAR;if(FLAGVAR) DATAVAR=args[ARGNAME];_HANDLE_REQUIRED(ARGNAME,FLAGVAR);args["_result"]=args["_result"]||([]);args["_result"]->FLAGVAR=FLAGVAR;args["_result"]->DATAVAR=DATAVAR;



#define ARGUMENT_STRING_LIST(ARGNAME,FLAGVAR,DATAVAR) int FLAGVAR=(int)!zero_type(args[ARGNAME]);array DATAVAR;if(FLAGVAR) DATAVAR=args[ARGNAME]/":";_HANDLE_REQUIRED(ARGNAME,FLAGVAR);args["_result"]=args["_result"]||([]);args["_result"]->FLAGVAR=FLAGVAR;args["_result"]->DATAVAR=DATAVAR;


#define ARGUMENT_INTEGER_LIST(ARGNAME,FLAGVAR,DATAVAR) int FLAGVAR=(int)!zero_type(args[ARGNAME]);array DATAVAR;if(FLAGVAR) DATAVAR=map(args[ARGNAME]/":",lambda(string v){return (int)v;});_HANDLE_REQUIRED(ARGNAME,FLAGVAR);args["_result"]=args["_result"]||([]);args["_result"]->FLAGVAR=FLAGVAR;args["_result"]->DATAVAR=DATAVAR;


#define ARGUMENT_INTARRAY_LIST(ARGNAME,FLAGVAR,DATAVAR) int FLAGVAR=(int)!zero_type(args[ARGNAME]);array DATAVAR;if(FLAGVAR) DATAVAR=map(args[ARGNAME]/":",lambda(string s){return map(s/",",lambda(string v){return (int)v;});});_HANDLE_REQUIRED(ARGNAME,FLAGVAR);args["_result"]=args["_result"]||([]);args["_result"]->FLAGVAR=FLAGVAR;args["_result"]->DATAVAR=DATAVAR;


#define ARGUMENT_EXECUTE(ARGNAME,FUNC) if(sizeof(args[Arg.REST])&&args[Arg.REST][0]==ARGNAME){ return FUNC(sizeof(args[Arg.REST]),args[Arg.REST]);}

#define REQUIRED args["_required_"]=1;

#define _DECLARE_ARGMENT_BEGIN args[0]=argv[0];args["_args_defines"]=args["_args_defines"]||({});args["_args_defines"]+=({lambda(){
#define _DECLARE_ARGMENT_END ;}});
#define _ARG_INFO(ARGNAME,DESC,REQUIRED_FLAG) args["_arg_info"]=args["_arg_info"]||({});args["_arg_info"]+=({({ARGNAME,DESC,REQUIRED_FLAG})});
#define _CMD_INFO(ARGNAME,DESC) args["_cmd_info"]=args["_cmd_info"]||({});args["_cmd_info"]+=({({ARGNAME,DESC})});

#define HANDLE_ARGUMENTS() args["_args_defines"]&&args["_args_defines"]();

#define DECLARE_ARGUMENT_FLAG(ARGNAME,FLAGVAR,DESC) ARGUMENT_FLAG(ARGNAME,FLAGVAR);_DECLARE_ARGMENT_BEGIN _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,0);
#define DECLARE_ARGUMENT_INTEGER(ARGNAME,FLAGVAR,DATAVAR,DESC) ARGUMENT_INTEGER(ARGNAME,FLAGVAR,DATAVAR);_DECLARE_ARGMENT_BEGIN _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,0);
#define DECLARE_ARGUMENT_STRING(ARGNAME,FLAGVAR,DATAVAR,DESC) ARGUMENT_STRING(ARGNAME,FLAGVAR,DATAVAR);_DECLARE_ARGMENT_BEGIN _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,0);
#define DECLARE_ARGUMENT_STRING_LIST(ARGNAME,FLAGVAR,DATAVAR,DESC) ARGUMENT_STRING_LIST(ARGNAME,FLAGVAR,DATAVAR);_DECLARE_ARGMENT_BEGIN _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,0);
#define DECLARE_ARGUMENT_INTEGER_LIST(ARGNAME,FLAGVAR,DATAVAR,DESC) ARGUMENT_INTEGER_LIST(ARGNAME,FLAGVAR,DATAVAR);_DECLARE_ARGMENT_BEGIN _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,0);
#define DECLARE_ARGUMENT_INTARRAY_LIST(ARGNAME,FLAGVAR,DATAVAR,DESC) ARGUMENT_INTARRAY_LIST(ARGNAME,FLAGVAR,DATAVAR);_DECLARE_ARGMENT_BEGIN _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,0);

#define DECLARE_ARGUMENT_FLAG_REQUIRED(ARGNAME,FLAGVAR,DESC) ARGUMENT_FLAG(ARGNAME,FLAGVAR);_DECLARE_ARGMENT_BEGIN REQUIRED _HANDLE_REQUIRED(ARGNAME,FLAGVAR); _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,1);
#define DECLARE_ARGUMENT_INTEGER_REQUIRED(ARGNAME,FLAGVAR,DATAVAR,DESC) ARGUMENT_INTEGER(ARGNAME,FLAGVAR,DATAVAR);_DECLARE_ARGMENT_BEGIN REQUIRED _HANDLE_REQUIRED(ARGNAME,FLAGVAR); _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,1);
#define DECLARE_ARGUMENT_STRING_REQUIRED(ARGNAME,FLAGVAR,DATAVAR,DESC) ARGUMENT_STRING(ARGNAME,FLAGVAR,DATAVAR);_DECLARE_ARGMENT_BEGIN REQUIRED _HANDLE_REQUIRED(ARGNAME,FLAGVAR); _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,1);
#define DECLARE_ARGUMENT_STRING_LIST_REQUIRED(ARGNAME,FLAGVAR,DATAVAR,DESC) ARGUMENT_STRING_LIST(ARGNAME,FLAGVAR,DATAVAR);_DECLARE_ARGMENT_BEGIN REQUIRED _HANDLE_REQUIRED(ARGNAME,FLAGVAR); _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,1);
#define DECLARE_ARGUMENT_INTEGER_LIST_REQUIRED(ARGNAME,FLAGVAR,DATAVAR,DESC) ARGUMENT_INTEGER_LIST(ARGNAME,FLAGVAR,DATAVAR);_DECLARE_ARGMENT_BEGIN REQUIRED _HANDLE_REQUIRED(ARGNAME,FLAGVAR); _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,1);
#define DECLARE_ARGUMENT_INTARRAY_LIST_REQUIRED(ARGNAME,FLAGVAR,DATAVAR,DESC) ARGUMENT_INTARRAY_LIST(ARGNAME,FLAGVAR,DATAVAR);_DECLARE_ARGMENT_BEGIN REQUIRED _HANDLE_REQUIRED(ARGNAME,FLAGVAR); _DECLARE_ARGMENT_END;_ARG_INFO(ARGNAME,DESC,1);

#define DECLARE_ARGUMENT_EXECUTE(ARGNAME,FUNC,DESC) _DECLARE_ARGMENT_BEGIN ARGUMENT_EXECUTE(ARGNAME,FUNC); _DECLARE_ARGMENT_END;_CMD_INFO(ARGNAME,DESC);
