#! /bin/env pike
#define BEGIN "open"
#define END "close"
#define MAX "maxval"
#define MIN "minval"


private class KDJTool{/*{{{*/
	protected float rsv(int n,array a,int i)
	{
		return (a[i][END]-min(@map(a[i-n+1..i],`[],MIN)))/(max(@map(a[i-n+1..i],`[],MAX))-min(@map(a[i-n+1..i],`[],MIN)));
	}
	protected float kdj_k(int n,array a,int i,float lastk)
	{
		catch{
			return lastk*2/3+rsv(n,a,i)*1/3;
		};
		return 0.5;
	}
	protected float kdj_d(int n,array a,int i,float lastk,float lastd)
	{
		catch{
			return lastd*2/3+kdj_k(n,a,i,lastk)*1/3;
		};
		return 0.5;
	}

	protected float kdj_j(int n,array a,int i,float lastk,float lastd)
	{
		return kdj_k(n,a,i,lastk)*3-kdj_d(n,a,i,lastk,lastd)*2;
	}
}/*}}}*/

int kdj_count_goldcross(array kdj,int n,float limit)
{
        int res;
        for(int i=max(0,sizeof(kdj)-n-1);i<sizeof(kdj)-1;i++){
                if(kdj[i][0]<limit&&kdj[i][0]<kdj[i][1]&&kdj[i+1][0]>kdj[i+1][1]){
                        res++;
                }
        }
        return res;
}
int kdj_count_deadcross(array kdj,int n,float limit)
{
        int res;
        for(int i=max(0,sizeof(kdj)-n-1);i<sizeof(kdj)-1;i++){
                if(kdj[i][0]>limit&&kdj[i][0]>kdj[i][1]&&kdj[i+1][0]<kdj[i+1][1]){
                        res++;
                }
        }
        return res;
}

class KDJ{
	inherit KDJTool;
	array a=({});
	array kdjlist=({({0.5,0.5,0.5})})*11;
	array ymdlist=({0})*11;
	array feed(object ymd,float open,float close,float maxval,float minval)
	{
		mapping info=(["open":open,"close":close,"maxval":maxval,"minval":minval]);
		a+=({info});
		float kk=kdj_k(9,a,sizeof(a)-1,kdjlist[-1][0]);
		float dd=kdj_d(9,a,sizeof(a)-1,kdjlist[-1][0],kdjlist[-1][1]);
		float jj=kdj_j(9,a,sizeof(a)-1,kdjlist[-1][0],kdjlist[-1][1]);
		kdjlist+=({({kk,dd,jj})});
		//append_kdj(kk,dd,jj);
		//Stdio.append_file(file,sprintf("%s,%f,%f,%f,%f,%f,%f,%f\n",ymd->format_ymd(),info->open,info->close,info->maxval,info->minval,kk,dd,jj));
		ymdlist+=({ymd});
		a=a[<10..];
		kdjlist=kdjlist[<10..];
		return query();
	};
	array query(int|void n)
	{
		return ({ymdlist[-(1+n)]})+kdjlist[-(1+n)];
	}
	array rollback()
	{
		a=a[..<1];
		kdjlist=kdjlist[..<1];
		ymdlist=ymdlist[..<1];
		return query();
	}
};

#if 0
#define USING_BINARY_SEARCH

#define WEEK_PHASE 1
#define WEEK_AVG_SIZE 1
#define CALENDAR_LINE_COUNT (2+WEEK_PHASE)

#define HOLD_MONTH -1
#define HOLD_WEEK (-1-WEEK_PHASE)
#define HOLD_DAY (HOLD_WEEK-1)
#define HOLD_HOUR (HOLD_DAY-1)
#define HOLD_HALF_HOUR (HOLD_HOUR-1)

private class ANY{
	int `[](mixed ig){return 1;}
}

#include <args.h>
int main(int argc,array argv)
{
	mapping args=Arg.parse(argv)+([0:argv[0]]);
	array rest=args[Arg.REST];

	DECLARE_ARGUMENT_STRING_REQUIRED("inst",inst_flag,inst,"=INSTANCE");
	DECLARE_ARGUMENT_STRING_REQUIRED("path",path_flag,savepath,"=PATH");
	DECLARE_ARGUMENT_INTEGER("start-interval-level",start_interval_level_flag,start_interval_level,"=N");
	DECLARE_ARGUMENT_FLAG("follow-stdin",follow_stdin_flag,"");
	DECLARE_ARGUMENT_STRING("out",out_flag,outfilestr,"=FILE");
	DECLARE_ARGUMENT_STRING("log-file",logfile_flag,logfile_str,"=FILE");

	if(Usage.usage(args,"HOUR|DAY|WEEK|MONTH",1)){
		return 0;
	}

	HANDLE_ARGUMENTS();

	int drawthis=([
			"hour":HOLD_HOUR,
			"day":HOLD_DAY,
			"week":HOLD_WEEK,
			"month":HOLD_MONTH,
			])[lower_case(rest[0])];

mapping|object last_strategies=ANY();
mapping|object gate=ANY();
mapping strategies;
mapping strategies_why=([]);

	array kdjs=({});
	for(int i=0;i<sizeof(Candle.all_intervals)+CALENDAR_LINE_COUNT;i++){
		kdjs+=({KDJ()});
	}
	array holds=allocate(sizeof(Candle.all_intervals)+CALENDAR_LINE_COUNT,0);

	array last_holds=copy_value(holds);

	array week_alters=({});

	array extra_lines=({0})*CALENDAR_LINE_COUNT;//day,week,month
	int extra_lines_startpos=0;

	void update_extra_lines(object lines,int|void skiplast)/*{{{*/
	{
		extra_lines[0]=lines->a[-1]->day_line(0,extra_lines[0],extra_lines_startpos,skiplast);
		week_alters=({});
		for(int i=0;i<WEEK_PHASE;i++){
			extra_lines[1+i]=lines->a[-1]->week_line(7*3600*24/WEEK_PHASE*i,extra_lines[1+i],extra_lines_startpos,skiplast);
			week_alters+=({7*3600*24/WEEK_PHASE*i});
		}
		extra_lines[-1]=lines->a[-1]->month_line(0,extra_lines[-1],extra_lines_startpos,skiplast);
		extra_lines_startpos=sizeof(lines->a[-1])-skiplast;
	};/*}}}*/

	int interval=Candle.all_intervals[0];
	int active=0;
	float last_curr=0.0;
	float curr=0.0;

	array rates=({});
	array drates=({});

	mapping strategy2rate=([]);
	mapping strategy2rangerate=([]);
	mapping strategy2maxrate=([]);
	mapping strategy2maxdrop=([]);

	array last_timevals=allocate(sizeof(Candle.all_intervals)+CALENDAR_LINE_COUNT,0);

	void handle_level_advance_open(object lines,int i)/*{{{*/
	{

#define SET_IF(X,VAR,VAL) ((X)?((VAR=VAL),(X)):0)
#define SET_IFNOT(X,VAR,VAL) ((X)?(X):((VAR=VAL),0))

#define KDJIN_KDJOUT(KEY,HOLD1,HOLD2) (!last_strategies[KEY]&&!last_holds[HOLD1]&&holds[HOLD1]||last_strategies[KEY]&&!(last_holds[HOLD2]&&!holds[HOLD2]))

		strategies=([
				"in":1,
				"wiwo":holds[HOLD_WEEK],
				]);

		last_holds=copy_value(holds);

		object item=lines->line(Candle.all_intervals[start_interval_level])->a[i];

		if(item->volume){
			string s="";
			s+=sprintf("- %s %f %s",Calendar.ISO.Second(item->timeval)->format_time_short(),last_curr,map(holds,`+,"")*" ");
			foreach(SortMapping.sort_values(strategy2rate);string key;float rate){
				s+=sprintf(" %s:%d->%d(%d:%s:%s)",key,last_strategies[key],strategies[key],0,strategies_why[key]||"",gate[key]?"o":"x");
			}
			s+="\n";
			if(out_flag){
				Stdio.append_file(outfilestr,s);
			}else{
				write("%s",s);
			}
		}
	};/*}}}*/
	void handle_level_advance_close(object lines,int i)/*{{{*/
	{
		//werror("handle_level_advance_close: i=%d\n",i);
		object item=lines->line(Candle.all_intervals[start_interval_level])->a[i];
		last_curr=curr;
		if(item->volume){
			curr=item->closeval;
		}
		if(last_curr!=0.0){
			rates+=({curr/last_curr});
			if(sizeof(rates)>=2)
				drates+=({rates[-2]/rates[-1]});
		}

		void handle_item(int n,object item,mixed info,int week_mode,int|void week_base)/*{{{*/
		{
			//werror("handle_item: n=%d %O %O",n,info,item->save());
			if(item->volume){
				active=1;
				if(last_curr!=item->closeval){
					werror("last_curr=%f curr=%f item->closeval=%f n=%d\n",last_curr,curr,item->closeval,n);
					throw(({"closeval not match.\n",backtrace()}));
				}
				//curr=item->closeval;
				int lk,ld,lj,k,d,j;
				if(!week_mode){
					[object ltm,lk,ld,lj]=kdjs[n]->query();
#define OCKDJ
#ifdef OCKDJ
					[object tm,k,d,j]=kdjs[n]->feed(Calendar.ISO.Second(item->timeval),item->openval,item->closeval,max(item->openval,item->closeval),min(item->openval,item->closeval));
#else
					[object tm,k,d,j]=kdjs[n]->feed(Calendar.ISO.Second(item->timeval),item->openval,item->closeval,item->maxval,item->minval);
#endif
				}else{
					[object ltm,lk,ld,lj]=kdjs[n]->query();
#define OCKDJ
#ifdef OCKDJ
					[object tm,k,d,j]=kdjs[n]->feed(Calendar.ISO.Second(item->timeval),item->openval,item->closeval,max(item->openval,item->closeval),min(item->openval,item->closeval));
#else
					[object tm,k,d,j]=kdjs[n]->feed(Calendar.ISO.Second(item->timeval),item->openval,item->closeval,item->maxval,item->minval);
#endif

					int days=WEEK_AVG_SIZE;
					for(int i=1;i<days;i++){
						int lk1,ld1,lj1,k1,d1,j1;
						[object ltm,lk1,ld1,lj1]=kdjs[week_base+((n+i-week_base)%WEEK_PHASE)]->query(1);
						[object tm,k1,d1,j1]=kdjs[week_base+((n+i-week_base)%WEEK_PHASE)]->query();
						lk+=lk1;ld+=ld1;lj+=lj1;k+=k1;d+=d1;j+=j1;
					}
					lk/=days; ld/=days; lj/=days; k/=days; d/=days; j/=days;
				}

				int upflag=k>d;
				int gx=k>d&&lk<ld;
				int dx=k<d&&lk>ld;
				int hold=dx||upflag&&!gx;

				holds[n]=hold;
			}
		};/*}}}*/
		for(int n=start_interval_level;n<sizeof(Candle.all_intervals);n++){
			int timeval=Time.align(item->timeval,Candle.all_intervals[n]);
			if(timeval>last_timevals[n]){ //if(timeval==item->timeval)
				last_timevals[n]=timeval;
				object line=lines->line(Candle.all_intervals[n]);
#ifdef USING_BINARY_SEARCH

				int pos=line->search(timeval);
				//werror("n=%d,pos=%d\n",n,pos);
				if(pos>=0){
						if(pos>0)
							handle_item(n,line->a[pos-1],pos-1,0);
				}else{
					throw(({Candle.all_intervals[n]+" not found.\n",backtrace()}));
				}
#else

				int found;
				foreach(line->a;int i;object item){
					if(line->a[i]->timeval==timeval){
						if(i>0)
							handle_item(n,line->a[i-1],i-1,0);
						found=1;
						break;
					}
				}
				if(!found){
					throw(({Candle.all_intervals[n]+" not found.\n",backtrace()}));
				}
#endif
			}

		}

		int active_phase;
		foreach(extra_lines;int nn;object line){
			int n=sizeof(Candle.all_intervals)+nn;
			string key;int alter;
			if(nn==0){
				key="day";alter=0;
			}else if(nn-1>=0&&nn-1<WEEK_PHASE){
				key="week";alter=week_alters[nn-1];
			}else{
				key="month";alter=0;
			}
			int timeval=Calendar.ISO.Second(item->timeval+alter)[key]()->unix_time()-alter;
			if(timeval>last_timevals[n]){
				last_timevals[n]=timeval;

#ifdef USING_BINARY_SEARCH
				int pos=line->search(timeval);
				if(pos>=0){
						if(pos>0){
							handle_item(n,line->a[pos-1],pos-1,nn>=1&&nn<1+WEEK_PHASE,sizeof(Candle.all_intervals)+1);
							if(nn>=1&&nn<1+WEEK_PHASE){
								active_phase=nn-1;
							}
						}
				}else{
					throw(({key+" not found.\n",backtrace()}));
				}
#else

				int found;
				foreach(line->a;int i;object item){
					if(item->timeval==timeval){
						if(i>0){
							handle_item(n,line->a[i-1],i-1,nn>=1&&nn<1+WEEK_PHASE,sizeof(Candle.all_intervals)+1);
							if(nn>=1&&nn<1+WEEK_PHASE){
								active_phase=nn-1;
							}
						}
						found=1;
						break;
					}
				}
				if(!found){
					throw(({key+" not found.\n",backtrace()}));
				}
#endif
			}
		}

		last_strategies=copy_value(strategies);
		foreach(strategies;string key;int hold){
			strategy2rate[key]=strategy2rate[key]||1.0;
			strategy2rangerate[key]=strategy2rangerate[key]||1.0;
			strategy2maxrate[key]=strategy2maxrate[key]||1.0;
			//strategy2recentrate[key]=strategy2recentrate[key]||({});
			strategy2maxdrop[key]=strategy2maxdrop[key]||1.0;
			//strategy2recentdrop[key]=strategy2recentdrop[key]||1.0;
			if(hold){
				strategy2rate[key]*=rates[-1];
				strategy2rangerate[key]*=rates[-1];
				//strategy2recentrate[key]+=({strategy2rate[key]});
				//strategy2recentrate[key]=strategy2recentrate[key][<29..];
				strategy2maxrate[key]=max(strategy2maxrate[key],strategy2rate[key]);
				strategy2maxdrop[key]=min(strategy2maxdrop[key],strategy2rate[key]/strategy2maxrate[key]);
				/*if(sizeof(strategy2recentrate[key])){
					strategy2recentdrop[key]=strategy2rate[key]/(`+(0.0,@strategy2recentrate[key])/(sizeof(strategy2recentrate[key])));
				}*/
			}
		}
		if(active){
			string s="";
			s+=sprintf("+ %s %f %f",Calendar.ISO.Second(item->timeval)->format_time_short(),last_curr,rates[-1],/*map(holds,`+,"")*" "*/);
			float maxrate=max(@values(strategy2rate));
			foreach(SortMapping.sort_values(strategy2rate);string key;float rate){
				s+=sprintf(" %s=%.1f,%.2f,%.2f",key,rate,1-strategy2maxdrop[key],rate/maxrate);
			}
			s+="\n";
			if(out_flag){
				Stdio.append_file(outfilestr,s);
			}else{
				write("%s",s);
			}
		}
	};/*}}}*/

	object lines=Candle.Lines(savepath+"/"+inst,"r");
	update_extra_lines(lines,1);
	for(int i=0;i<sizeof(lines->line(Candle.all_intervals[start_interval_level])->a);i++){
		if(i-1>=0)
			handle_level_advance_close(lines,i-1);
		handle_level_advance_open(lines,i);
	}
	lines->close();
	if(follow_stdin_flag){
		signal(signum("SIGINT"),0);
		object pf;
		object logfile=logfile_flag&&Stdio.File(logfile_str,"rwca");
		pf=Candle.ParseFile(savepath,lambda(string inst){
			return inst!="";
			},lambda(int level){
				if(level==sizeof(Candle.all_intervals)-1){
					update_extra_lines(pf->parsers[inst],1);
				}
				if(level>=start_interval_level){
					int p0=sizeof(pf->parsers[inst]->a[start_interval_level]->a)-2;
					int p=p0;
					while(pf->parsers[inst]->a[start_interval_level]->a[p]->volume==0&&p>0)
						p--;
					while(p<=p0){
						handle_level_advance_close(pf->parsers[inst],p);
						handle_level_advance_open(pf->parsers[inst],p+1);
						p++;
					}
				}
			},logfile);
		object t=Thread.Thread(lambda(){
			pf->parse(Stdio.stdin);
			pf->close();
			logfile&&logfile->close();
			exit(0);
		});
		return -1;
	}
}
#endif
